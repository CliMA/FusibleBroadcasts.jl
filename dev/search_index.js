var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FusibleBroadcasts]\nOrder   = [:macro, :type, :function]","category":"page"},{"location":"api/#FusibleBroadcasts.@fusible-Tuple{Any}","page":"API","title":"FusibleBroadcasts.@fusible","text":"@fusible <method definition>\n\nGenerates two new method definitions, evaluating them along with the original. One definition replaces all arguments that have @fuse annotations with FusibleBroadcastAccumulators, while the other definition replaces them with UnfusibleBroadcastEvaluators. If an annotated argument in the original definition is restricted to some type T, the new methods are restricted to FusibleBroadcastAccumulator{T} and UnfusibleBroadcastEvaluator{T}.\n\nThis macro can be thought of as an analogue of @simd that operates at the level of broadcast expressions. Using this macro amounts to telling the compiler that the body of the method definition satisfies the following constraints:\n\nall broadcasts are in-place\nall broadcast destinations are either an arguments annotated with @fuse or components of annotated arguments, and they are not aliased by other names\nall broadcasts can be freely rearranged, regardless of any changes to floating point round-off error this may cause\nall non-broadcast operations on arguments annotated with @fuse will always yield the same results when evaluated on inputs with some particular types\n\nThe first two constraints are checked automatically, but users should ensure that they satisfy the other constraints when marking a method as @fusible.\n\n\n\n\n\n","category":"macro"},{"location":"api/#FusibleBroadcasts.@lazy_dot-Tuple{Any}","page":"API","title":"FusibleBroadcasts.@lazy_dot","text":"@lazy_dot <expression>\n\nRoughly equivalent to @., but without the call to Base.materialize that gets inserted during the code lowering process.\n\nReturns a FusibleBroadcasted object that lazily represents the computations in the given expression. This object can be inserted directly into other broadcast expressions, providing a mechanism for splitting up complex broadcasts into smaller broadcasts without triggering allocations. Passing this object to Base.materialize should be equivalent to replacing @lazy_dot with @..\n\n\n\n\n\n","category":"macro"},{"location":"api/#FusibleBroadcasts.DroppedBroadcast","page":"API","title":"FusibleBroadcasts.DroppedBroadcast","text":"DroppedBroadcast()\n\nUsed as a replacement for in-place broadcast expressions that get dropped from method definitions by @fusible. Also functions as an intermediate value during broadcast simplification.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.FusedBroadcast","page":"API","title":"FusibleBroadcasts.FusedBroadcast","text":"FusedBroadcast(accumulator, optimizer)\n\nA materializable form of the lazy broadcast expressions in the given FusibleBroadcastAccumulator, divided into FusedBroadcastSteps based on the given FusibleBroadcastOptimizer.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.FusedBroadcastStep","page":"API","title":"FusibleBroadcasts.FusedBroadcastStep","text":"FusedBroadcastStep(names, values)\n\nA set of values, some of which may be FusibleBroadcasted objects, that can be simultaneously materialized into a destination at the given FieldNames.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.FusibleBroadcastAccumulator","page":"API","title":"FusibleBroadcasts.FusibleBroadcastAccumulator","text":"FusibleBroadcastAccumulator([dest], [warn_on_unwrap])\n\nA wrapper for dest that can be used to lazily store broadcast expressions which appear in functions that are annotated with @fusible.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.FusibleBroadcastOptimizer","page":"API","title":"FusibleBroadcasts.FusibleBroadcastOptimizer","text":"FusibleBroadcastOptimizer\n\nControls how a FusibleBroadcastAccumulator gets divided into FusedBroadcastSteps within a FusedBroadcast. This can be based on memory usage, register pressure, code generation time, or some combination of factors.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.FusibleBroadcasted","page":"API","title":"FusibleBroadcasts.FusibleBroadcasted","text":"FusibleBroadcasted(f, args)\n\nAn analogue of Base.broadcasted that avoids computing broadcast styles and axes, but which gets converted into the result of Base.broadcasted when used in a broadcast expression.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.LazyOrEagerWrapper","page":"API","title":"FusibleBroadcasts.LazyOrEagerWrapper","text":"LazyOrEagerWrapper\n\nSupertype of UnfusibleBroadcastEvaluators and FusibleBroadcastAccumulators, both of which are constructed as <Type>([dest], [warn_on_unwrap]).\n\nThe first constructor argument, dest, which is set to UnknownDestination by default, represents a destination into which broadcasts can be materialized. This argument only needs to be specified if the wrapper is going to be passed to unwrap, in which case the default value of UnknownDestination will cause an error to be thrown. For an UnfusibleBroadcastEvaluator, dest should be the destination itself, but, for a FusibleBroadcastAccumulator, it only has to be similar to the final FusedBroadcast destination.\n\nThe second constructor argument, warn_on_unwrap, which is set to false by default, toggles whether a warning will be logged when the wrapper is passed to unwrap (except for when this occurs in one of several common functions like propertynames and eltype, which are easily extended to LazyOrEagerWrappers with well-defined destinations). This argument only needs to be specified when dest is specified, since an UnknownDestination will always cause unwrap to throw an error. A LazyOrEagerWrapper gets unwrapped whenever it is passed from a user-defined method annotated with @fusible to one that is not annotated, so this toggle can be used to check whether all of the broadcasts executed by a block of code appear within annotated methods and can be handled by a FusibleBroadcastAccumulator, or if some need to be handled separately by an UnfusibleBroadcastEvaluator.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.MaximizeFusion","page":"API","title":"FusibleBroadcasts.MaximizeFusion","text":"MaximizeFusion()\n\nThe default FusibleBroadcastOptimizer. Evaluates all accumulated broadcasts in a single step.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.UnfusibleBroadcastEvaluator","page":"API","title":"FusibleBroadcasts.UnfusibleBroadcastEvaluator","text":"UnfusibleBroadcastEvaluator([dest], [warn_on_unwrap])\n\nA wrapper for dest that can be used to eagerly evaluate broadcast expressions which appear in functions that are not annotated with @fusible.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.UnknownDestination","page":"API","title":"FusibleBroadcasts.UnknownDestination","text":"UnknownDestination()\n\nThe default destination for a LazyOrEagerWrapper. Errors upon being unwrapped.\n\n\n\n\n\n","category":"type"},{"location":"api/#FusibleBroadcasts.fused_materialize!-Tuple{Any, Any, Any}","page":"API","title":"FusibleBroadcasts.fused_materialize!","text":"fused_materialize!(accumulator, name, value, [f])\n\nAdds an instruction of the form dest.name .= value (or dest.name .f= value if a reduction operator f is specified) to a FusibleBroadcastAccumulator.\n\n\n\n\n\n","category":"method"},{"location":"api/#FusibleBroadcasts.needs_unwrap_before_call-Tuple{Any, Vararg{Any}}","page":"API","title":"FusibleBroadcasts.needs_unwrap_before_call","text":"needs_unwrap_before_call(f, args...)\n\nWhen one or more arguments in args are LazyOrEagerWrappers, this checks whether unwrap needs to be called on them before f(args...) is evaluated. If at least one of the arguments also has warn_on_unwrap set to true, a warning will be logged whenever unwrap is called.\n\nIn order to disable the warning for a particular function f (regardless of whether it has any arguments with warn_on_unwrap set to true), add a new method for f that accepts LazyOrEagerWrappers and calls unwrap on them, and then extend needs_unwrap_before_call to return false for that method.\n\n\n\n\n\n","category":"method"},{"location":"api/#FusibleBroadcasts.simplified_fusible_broadcasted-Tuple{Any}","page":"API","title":"FusibleBroadcasts.simplified_fusible_broadcasted","text":"simplified_fusible_broadcasted(value)\n\nWhen value is a FusibleBroadcasted, this fuses all nested functions and all linear combinations of linear functions within value.\n\n\n\n\n\n","category":"method"},{"location":"api/#FusibleBroadcasts.simplify_accumulated_broadcasts!-Tuple{Any}","page":"API","title":"FusibleBroadcasts.simplify_accumulated_broadcasts!","text":"simplify_accumulated_broadcasts!(accumulator)\n\nRearranges the broadcast expressions in a FusibleBroadcastAccumulator so as to minimize the number of operations required to materialize them.\n\n\n\n\n\n","category":"method"},{"location":"api/#FusibleBroadcasts.unwrap-Tuple{Any}","page":"API","title":"FusibleBroadcasts.unwrap","text":"unwrap(wrapper)\n\nExtracts the destination of a LazyOrEagerWrapper; i.e., the array or array-like object into which broadcasts get materialized. Throws an error when the destination is an UnknownDestination.\n\n\n\n\n\n","category":"method"},{"location":"api/#FusibleBroadcasts.warn_on_unwrap-Union{Tuple{FusibleBroadcasts.LazyOrEagerWrapper{D, W}}, Tuple{W}, Tuple{D}} where {D, W}","page":"API","title":"FusibleBroadcasts.warn_on_unwrap","text":"warn_on_unwrap(wrapper)\n\nChecks whether a warning should be logged when a LazyOrEagerWrapper is passed to unwrap.\n\n\n\n\n\n","category":"method"},{"location":"#FusibleBroadcasts.jl","page":"Home","title":"FusibleBroadcasts.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An experimental framework for fusing broadcast expressions across arbitrary language constructs. This package exports two macros:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@lazy_dot: An analogue to @. that executes calls to Base.broadcasted but drops the final call to Base.materialize. This macro be used to split long broadcast expressions into meaningful sub-expressions without sacrificing performance.\n@fusible: An annotation that can be added to method definitions, allowing them to participate in the process of broadcast fusion. As long as the method body satisfies several syntactic constraints, this macro can generate an alternative method definition where all calls to Base.materialize! are replaced with calls to fused_materialize!, which stores the output of @lazy_dot so that it can later be evaluated in an optimally fused way. Note: This macro is still in an early stage of development. Use with caution.","category":"page"}]
}
